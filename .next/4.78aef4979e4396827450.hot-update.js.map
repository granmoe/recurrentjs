{"version":3,"sources":["/mnt/c/Users/Matt/projects/ai/recurrentjs/pages/index.js"],"names":["ppl_list","tick_iter","generator","hidden_sizes","letter_size","regc","learning_rate","clipval","sample_softmax_temperature","max_chars_gen","epoch_size","input_size","output_size","letterToIndex","indexToLetter","vocab","data_sents","solver","R","Solver","pplGraph","lh","logprobs","probs","model","initVocab","sents","count_threshold","charCounts","Array","from","join","reduce","counts","char","Object","entries","result","count","push","nextIndex","l","i","v","length","initModel","RandMat","rnn","initRNN","lstm","initLSTM","reinit","inputSentences","split","map","str","trim","forwardIndex","G","ix","prev","x","rowPluck","forwardRNN","forwardLSTM","predictSentence","samplei","temperature","Graph","s","o","q","nq","w","softmax","maxi","letter","costfun","sent","n","log2ppl","cost","ix_source","ix_target","Math","log2","log","dw","ppl","pow","median","values","sort","a","b","half","floor","tick","sentix","randi","t0","Date","valueOf","cost_struct","backward","solver_stats","step","t1","tick_time","console","App","state","intervalId","hasRun","init","setInterval","setState","pause","clearInterval"],"mappings":"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","file":"4.78aef4979e4396827450.hot-update.js","sourcesContent":["import { Component } from 'react'\r\nimport { Button } from 'antd'\r\nimport R from '../recurrent'\r\nimport Rvis from '../recurrent/vis'\r\nimport inputSentences from '../config/input-sentences'\r\n\r\nlet ppl_list = []\r\nlet tick_iter = 0\r\n\r\n// model parameters\r\nconst generator = 'lstm' // can be 'rnn' or 'lstm'\r\nconst hidden_sizes = [20, 20] // list of sizes of hidden layers\r\nconst letter_size = 5 // size of letter embeddings\r\n\r\n// optimization\r\nconst regc = 0.000001 // L2 regularization strength\r\nconst learning_rate = 0.01 // learning rate\r\nconst clipval = 5.0 // clip gradients at this value\r\n// prediction params\r\nlet sample_softmax_temperature = 1.0 // how peaky model predictions should be\r\nlet max_chars_gen = 100 // max length of generated sentences\r\n\r\n// various global var inits\r\nlet epoch_size = -1\r\nlet input_size = -1\r\nlet output_size = -1\r\nlet letterToIndex = {}\r\nlet indexToLetter = {}\r\nlet vocab = []\r\nlet data_sents = []\r\nlet solver = new R.Solver() // should be class because it needs memory for step caches\r\nlet pplGraph = new Rvis()\r\n\r\nlet lh, logprobs, probs\r\n\r\nlet model = {}\r\n\r\nvar initVocab = function(sents, count_threshold) {\r\n  // go over all characters and keep track of all unique ones seen\r\n  const charCounts = Array.from(sents.join('')).reduce((counts, char) => {\r\n    counts[char] = counts[char] ? counts[char] + 1 : (counts[char] = 1)\r\n    return counts\r\n  }, {})\r\n\r\n  // NOTE: start at nextIndex at 1 because we will have START and END tokens!\r\n  // that is, START token will be index 0 in model letter vectors\r\n  // and END token will be index 0 in the next character softmax\r\n  const { letterToIndex: l, indexToLetter: i, vocab: v } = Object.entries(\r\n    charCounts,\r\n  ).reduce(\r\n    (result, [char, count]) => {\r\n      if (count >= count_threshold) {\r\n        result.vocab.push(char)\r\n        result.letterToIndex[char] = result.nextIndex\r\n        result.indexToLetter[result.nextIndex] = char\r\n        result.nextIndex += 1\r\n      }\r\n      return result\r\n    },\r\n    {\r\n      letterToIndex: {},\r\n      indexToLetter: {},\r\n      vocab: [],\r\n      nextIndex: 1,\r\n    },\r\n  )\r\n\r\n  letterToIndex = l\r\n  indexToLetter = i\r\n  vocab = v\r\n\r\n  // globals written: indexToLetter, letterToIndex, vocab (list), and:\r\n  input_size = vocab.length + 1\r\n  output_size = vocab.length + 1\r\n  epoch_size = sents.length\r\n  // TODO: Show this in the UI\r\n  // $('#prepro_status').text(\r\n  // 'found ' + vocab.length + ' distinct characters: ' + vocab.join(''),\r\n  // )\r\n}\r\n\r\nvar initModel = function() {\r\n  // letter embedding vectors\r\n  let model = {}\r\n  model['Wil'] = new R.RandMat(input_size, letter_size, 0, 0.08)\r\n\r\n  if (generator === 'rnn') {\r\n    var rnn = R.initRNN(letter_size, hidden_sizes, output_size)\r\n    model = {\r\n      ...model,\r\n      ...rnn,\r\n    }\r\n  } else {\r\n    var lstm = R.initLSTM(letter_size, hidden_sizes, output_size)\r\n    model = {\r\n      ...model,\r\n      ...lstm,\r\n    }\r\n  }\r\n\r\n  return model\r\n}\r\n\r\nfunction reinit() {\r\n  // note: reinit writes global vars by running\r\n  // eval on a textarea\r\n  // TODO: Allow user to set hyperparams in a safer way, via inputs\r\n\r\n  solver = new R.Solver() // GLOBAL\r\n  pplGraph = new Rvis() // GLOBAL\r\n\r\n  ppl_list = [] // GLOBAL\r\n  tick_iter = 0 // GLOBAL\r\n\r\n  data_sents = inputSentences.split('\\n').map(str => str.trim())\r\n  initVocab(data_sents, 1) // takes count threshold for characters\r\n  model = initModel() // pass in some of the stuff that will be returned from initVocab\r\n}\r\n\r\nconst forwardIndex = (G, model, ix, prev) => {\r\n  const x = G.rowPluck(model['Wil'], ix)\r\n  // forward prop the sequence learner\r\n  return generator === 'rnn'\r\n    ? R.forwardRNN(G, model, hidden_sizes, x, prev)\r\n    : R.forwardLSTM(G, model, hidden_sizes, x, prev)\r\n}\r\n\r\nconst predictSentence = (model, samplei, temperature) => {\r\n  if (typeof samplei === 'undefined') {\r\n    samplei = false\r\n  }\r\n  if (typeof temperature === 'undefined') {\r\n    temperature = 1.0\r\n  }\r\n\r\n  var G = new R.Graph(false)\r\n  var s = ''\r\n  var prev = {}\r\n  while (true) {\r\n    // RNN tick\r\n    var ix = s.length === 0 ? 0 : letterToIndex[s[s.length - 1]]\r\n    lh = forwardIndex(G, model, ix, prev)\r\n    prev = lh\r\n\r\n    // sample predicted letter\r\n    logprobs = lh.o\r\n    if (temperature !== 1.0 && samplei) {\r\n      // scale log probabilities by temperature and renormalize\r\n      // if temperature is high, logprobs will go towards zero\r\n      // and the softmax outputs will be more diffuse. if temperature is\r\n      // very low, the softmax outputs will be more peaky\r\n      for (var q = 0, nq = logprobs.w.length; q < nq; q++) {\r\n        logprobs.w[q] /= temperature\r\n      }\r\n    }\r\n\r\n    probs = R.softmax(logprobs)\r\n    if (samplei) {\r\n      var ix = R.samplei(probs.w)\r\n    } else {\r\n      var ix = R.maxi(probs.w)\r\n    }\r\n\r\n    if (ix === 0) break // END token predicted, break out\r\n    if (s.length > max_chars_gen) {\r\n      break\r\n    } // something is wrong\r\n\r\n    var letter = indexToLetter[ix]\r\n    s += letter\r\n  }\r\n  return s\r\n}\r\n\r\nvar costfun = function(model, sent) {\r\n  // takes a model and a sentence and\r\n  // calculates the loss. Also returns the Graph\r\n  // object which can be used to do backprop\r\n  let n = sent.length\r\n  let G = new R.Graph()\r\n  let log2ppl = 0.0\r\n  let cost = 0.0\r\n  let prev = {}\r\n  for (let i = -1; i < n; i++) {\r\n    // start and end tokens are zeros\r\n    let ix_source = i === -1 ? 0 : letterToIndex[sent[i]] // first step: start with START token\r\n    let ix_target = i === n - 1 ? 0 : letterToIndex[sent[i + 1]] // last step: end with END token\r\n\r\n    lh = forwardIndex(G, model, ix_source, prev)\r\n    prev = lh\r\n\r\n    // set gradients into logprobabilities\r\n    logprobs = lh.o // interpret output as logprobs\r\n    probs = R.softmax(logprobs) // compute the softmax probabilities\r\n\r\n    log2ppl += -Math.log2(probs.w[ix_target]) // accumulate base 2 log prob and do smoothing\r\n    cost += -Math.log(probs.w[ix_target])\r\n\r\n    // write gradients into log probabilities\r\n    logprobs.dw = probs.w\r\n    logprobs.dw[ix_target] -= 1\r\n  }\r\n  const ppl = Math.pow(2, log2ppl / (n - 1))\r\n  return { G: G, ppl: ppl, cost: cost }\r\n}\r\n\r\nfunction median(values) {\r\n  values.sort((a, b) => a - b) // OPT: Isn't this the default sort?\r\n  const half = Math.floor(values.length / 2)\r\n  return values.length % 2\r\n    ? values[half]\r\n    : (values[half - 1] + values[half]) / 2.0\r\n}\r\n\r\nfunction tick() {\r\n  // sample sentence fromd data\r\n  let sentix = R.randi(0, data_sents.length)\r\n  let sent = data_sents[sentix]\r\n\r\n  let t0 = new Date().valueOf() // log start timestamp\r\n\r\n  // evaluate cost function on a sentence\r\n  let cost_struct = costfun(model, sent)\r\n\r\n  // use built up graph to compute backprop (set .dw fields in mats)\r\n  cost_struct.G.backward()\r\n  // perform param update\r\n  let solver_stats = solver.step(model, learning_rate, regc, clipval)\r\n  //$(\"#gradclip\").text('grad clipped ratio: ' + solver_stats.ratio_clipped)\r\n\r\n  let t1 = new Date().valueOf()\r\n  let tick_time = t1 - t0\r\n\r\n  ppl_list.push(cost_struct.ppl) // keep track of perplexity\r\n\r\n  // evaluate now and then\r\n  tick_iter += 1\r\n  if (tick_iter % 50 === 0) {\r\n    // draw samples\r\n    // $('#samples').html('') // TODO: Show samples in the UI...for now just log them out\r\n    for (var q = 0; q < 5; q++) {\r\n      console.log(\r\n        'NN output - sample:',\r\n        predictSentence(model, true, sample_softmax_temperature),\r\n      )\r\n      // var pred = predictSentence(model, true, sample_softmax_temperature)\r\n      // var pred_div = '<div class=\"apred\">' + pred + '</div>'\r\n      // $('#samples').append(pred_div)\r\n    }\r\n  }\r\n\r\n  if (tick_iter % 10 === 0) {\r\n    // draw argmax prediction\r\n    // TODO: Show this in the UI...for now just log it out\r\n    console.log('NN output - argmax prediction:', predictSentence(model, false))\r\n    // $('#argmax').html('')\r\n    // var pred = predictSentence(model, false)\r\n    // var pred_div = '<div class=\"apred\">' + pred + '</div>'\r\n    // $('#argmax').append(pred_div)\r\n\r\n    // // keep track of perplexity\r\n    // $('#epoch').text('epoch: ' + (tick_iter / epoch_size).toFixed(2))\r\n    // $('#ppl').text('perplexity: ' + cost_struct.ppl.toFixed(2))\r\n    // $('#ticktime').text(\r\n    //   'forw/bwd time per example: ' + tick_time.toFixed(1) + 'ms',\r\n    // )\r\n\r\n    // TODO: Different solution for graph...maybe victory or something...or maybe antd has something\r\n    // if (tick_iter % 100 === 0) {\r\n    // var median_ppl = median(ppl_list)\r\n    // ppl_list = []\r\n    // pplGraph.add(tick_iter, median_ppl)\r\n    // pplGraph.drawSelf(document.getElementById('pplgraph'))\r\n    // }\r\n  }\r\n}\r\n\r\n// var iid = null\r\n// $('#learn').click(function() {\r\n//   reinit()\r\n//   if (iid !== null) {\r\n//     clearInterval(iid)\r\n//   }\r\n//   iid = setInterval(tick, 0)\r\n\r\n// This was commented out in his code...perhaps an unfinished idea?\r\n//$('#gradcheck').click(gradCheck);\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    intervalId: null,\r\n    hasRun: false,\r\n  }\r\n\r\n  init = () => {\r\n    reinit()\r\n    const intervalId = setInterval(tick, 0)\r\n    this.setState({ intervalId, hasRun: true })\r\n  }\r\n\r\n  pause = () => {\r\n    if (!this.state.hasRun) {\r\n      this.init()\r\n      return\r\n    }\r\n\r\n    if (this.state.intervalId) {\r\n      clearInterval(this.state.intervalId)\r\n      this.setState({ intervalId: null })\r\n    } else {\r\n      const intervalId = setInterval(tick, 0)\r\n      this.setState({ intervalId })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main>\r\n        <Button type=\"primary\" onClick={this.pause}>\r\n          {!this.state.hasRun\r\n            ? 'Start'\r\n            : this.state.intervalId ? 'Pause' : 'Resume'}\r\n        </Button>\r\n        <section>\r\n          <h1>RNNs</h1>\r\n          <p>Here is some info about RNNs</p>\r\n        </section>\r\n        <section>\r\n          <h1>Experiment</h1>\r\n          <p>All the controls will go here with brief explanations</p>\r\n        </section>\r\n      </main>\r\n    )\r\n  }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./pages/index.js"],"sourceRoot":""}